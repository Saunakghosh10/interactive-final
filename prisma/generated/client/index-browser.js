
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  username: 'username',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  password: 'password',
  bio: 'bio',
  location: 'location',
  website: 'website',
  linkedinUrl: 'linkedinUrl',
  githubUrl: 'githubUrl',
  twitterUrl: 'twitterUrl',
  profileVisibility: 'profileVisibility',
  profileCompleteness: 'profileCompleteness',
  verificationToken: 'verificationToken',
  verificationExpires: 'verificationExpires',
  resetToken: 'resetToken',
  resetExpires: 'resetExpires',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.IdeaScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  content: 'content',
  category: 'category',
  visibility: 'visibility',
  status: 'status',
  tags: 'tags',
  imageUrl: 'imageUrl',
  viewCount: 'viewCount',
  sparkCount: 'sparkCount',
  featured: 'featured',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  publishedAt: 'publishedAt',
  authorId: 'authorId'
};

exports.Prisma.SparkScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  userId: 'userId',
  ideaId: 'ideaId',
  projectId: 'projectId',
  commentId: 'commentId'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  authorId: 'authorId',
  projectId: 'projectId',
  ideaId: 'ideaId',
  parentId: 'parentId',
  sparkCount: 'sparkCount',
  isEdited: 'isEdited'
};

exports.Prisma.ContributionRequestScalarFieldEnum = {
  id: 'id',
  message: 'message',
  skills: 'skills',
  experience: 'experience',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  respondedAt: 'respondedAt',
  userId: 'userId',
  ideaId: 'ideaId'
};

exports.Prisma.ActivityScalarFieldEnum = {
  id: 'id',
  type: 'type',
  description: 'description',
  metadata: 'metadata',
  createdAt: 'createdAt',
  userId: 'userId',
  ideaId: 'ideaId',
  projectId: 'projectId'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  title: 'title',
  message: 'message',
  read: 'read',
  metadata: 'metadata',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  reason: 'reason',
  description: 'description',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  reporterId: 'reporterId',
  userId: 'userId',
  ideaId: 'ideaId',
  commentId: 'commentId'
};

exports.Prisma.BookmarkScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  userId: 'userId',
  ideaId: 'ideaId'
};

exports.Prisma.IdeaDraftScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  content: 'content',
  category: 'category',
  visibility: 'visibility',
  tags: 'tags',
  imageUrl: 'imageUrl',
  skills: 'skills',
  industries: 'industries',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  authorId: 'authorId'
};

exports.Prisma.IdeaAttachmentScalarFieldEnum = {
  id: 'id',
  filename: 'filename',
  fileUrl: 'fileUrl',
  fileType: 'fileType',
  fileSize: 'fileSize',
  ideaId: 'ideaId',
  uploadedAt: 'uploadedAt'
};

exports.Prisma.IdeaSkillScalarFieldEnum = {
  id: 'id',
  ideaId: 'ideaId',
  skillId: 'skillId'
};

exports.Prisma.IdeaIndustryScalarFieldEnum = {
  id: 'id',
  ideaId: 'ideaId',
  industryId: 'industryId'
};

exports.Prisma.SkillScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category: 'category',
  description: 'description',
  createdAt: 'createdAt'
};

exports.Prisma.IndustryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt'
};

exports.Prisma.UserSkillScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  skillId: 'skillId',
  proficiency: 'proficiency',
  yearsOfExp: 'yearsOfExp',
  createdAt: 'createdAt'
};

exports.Prisma.UserIndustryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  industryId: 'industryId',
  createdAt: 'createdAt'
};

exports.Prisma.FollowScalarFieldEnum = {
  id: 'id',
  followerId: 'followerId',
  followingId: 'followingId',
  createdAt: 'createdAt'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  content: 'content',
  status: 'status',
  tags: 'tags',
  imageUrl: 'imageUrl',
  sparkCount: 'sparkCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  authorId: 'authorId'
};

exports.Prisma.CollaborationScalarFieldEnum = {
  id: 'id',
  role: 'role',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  projectId: 'projectId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.ProfileVisibility = exports.$Enums.ProfileVisibility = {
  PUBLIC: 'PUBLIC',
  PRIVATE: 'PRIVATE'
};

exports.IdeaCategory = exports.$Enums.IdeaCategory = {
  TECHNOLOGY: 'TECHNOLOGY',
  BUSINESS: 'BUSINESS',
  DESIGN: 'DESIGN',
  HEALTHCARE: 'HEALTHCARE',
  EDUCATION: 'EDUCATION',
  ENTERTAINMENT: 'ENTERTAINMENT',
  ENVIRONMENT: 'ENVIRONMENT',
  SOCIAL_IMPACT: 'SOCIAL_IMPACT',
  FINANCE: 'FINANCE',
  LIFESTYLE: 'LIFESTYLE',
  OTHER: 'OTHER'
};

exports.IdeaVisibility = exports.$Enums.IdeaVisibility = {
  PUBLIC: 'PUBLIC',
  PRIVATE: 'PRIVATE'
};

exports.IdeaStatus = exports.$Enums.IdeaStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  ARCHIVED: 'ARCHIVED'
};

exports.ContributionRequestStatus = exports.$Enums.ContributionRequestStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  WITHDRAWN: 'WITHDRAWN'
};

exports.ActivityType = exports.$Enums.ActivityType = {
  IDEA_CREATED: 'IDEA_CREATED',
  IDEA_UPDATED: 'IDEA_UPDATED',
  IDEA_SPARKED: 'IDEA_SPARKED',
  IDEA_COMMENTED: 'IDEA_COMMENTED',
  USER_FOLLOWED: 'USER_FOLLOWED',
  CONTRIBUTION_REQUESTED: 'CONTRIBUTION_REQUESTED',
  CONTRIBUTION_ACCEPTED: 'CONTRIBUTION_ACCEPTED',
  CONTRIBUTION_WITHDRAWN: 'CONTRIBUTION_WITHDRAWN',
  PROJECT_CREATED: 'PROJECT_CREATED',
  PROJECT_UPDATED: 'PROJECT_UPDATED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  SPARK: 'SPARK',
  COMMENT: 'COMMENT',
  FOLLOW: 'FOLLOW',
  CONTRIBUTION_REQUEST: 'CONTRIBUTION_REQUEST',
  CONTRIBUTION_ACCEPTED: 'CONTRIBUTION_ACCEPTED',
  MENTION: 'MENTION',
  SYSTEM: 'SYSTEM'
};

exports.ReportReason = exports.$Enums.ReportReason = {
  SPAM: 'SPAM',
  INAPPROPRIATE_CONTENT: 'INAPPROPRIATE_CONTENT',
  HARASSMENT: 'HARASSMENT',
  COPYRIGHT_VIOLATION: 'COPYRIGHT_VIOLATION',
  MISINFORMATION: 'MISINFORMATION',
  OTHER: 'OTHER'
};

exports.ReportStatus = exports.$Enums.ReportStatus = {
  PENDING: 'PENDING',
  REVIEWED: 'REVIEWED',
  RESOLVED: 'RESOLVED',
  DISMISSED: 'DISMISSED'
};

exports.AttachmentType = exports.$Enums.AttachmentType = {
  IMAGE: 'IMAGE',
  PDF: 'PDF',
  DOCUMENT: 'DOCUMENT'
};

exports.SkillLevel = exports.$Enums.SkillLevel = {
  BEGINNER: 'BEGINNER',
  INTERMEDIATE: 'INTERMEDIATE',
  ADVANCED: 'ADVANCED',
  EXPERT: 'EXPERT'
};

exports.ProjectStatus = exports.$Enums.ProjectStatus = {
  PLANNING: 'PLANNING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  ON_HOLD: 'ON_HOLD'
};

exports.CollaborationStatus = exports.$Enums.CollaborationStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED'
};

exports.Prisma.ModelName = {
  Account: 'Account',
  Session: 'Session',
  User: 'User',
  Idea: 'Idea',
  Spark: 'Spark',
  Comment: 'Comment',
  ContributionRequest: 'ContributionRequest',
  Activity: 'Activity',
  Notification: 'Notification',
  Report: 'Report',
  Bookmark: 'Bookmark',
  IdeaDraft: 'IdeaDraft',
  IdeaAttachment: 'IdeaAttachment',
  IdeaSkill: 'IdeaSkill',
  IdeaIndustry: 'IdeaIndustry',
  Skill: 'Skill',
  Industry: 'Industry',
  UserSkill: 'UserSkill',
  UserIndustry: 'UserIndustry',
  Follow: 'Follow',
  VerificationToken: 'VerificationToken',
  Project: 'Project',
  Collaboration: 'Collaboration'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
