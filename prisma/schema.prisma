generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String    @id @default(cuid())
  name                 String?
  username             String?   @unique
  email                String    @unique
  emailVerified        DateTime?
  image                String?
  password             String?
  bio                  String?   @db.Text
  location             String?
  website              String?
  linkedinUrl          String?
  githubUrl            String?
  twitterUrl           String?
  profileVisibility    ProfileVisibility @default(PUBLIC)
  profileCompleteness  Int       @default(0)
  verificationToken    String?
  verificationExpires  DateTime?
  resetToken           String?
  resetExpires         DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  accounts            Account[]
  sessions            Session[]
  projects            Project[]
  ideas               Idea[]
  collaborations      Collaboration[]
  comments            Comment[]
  sparks              Spark[]
  skills              UserSkill[]
  industries          UserIndustry[]
  followers           Follow[] @relation("UserFollowers")
  following           Follow[] @relation("UserFollowing")
  ideaDrafts          IdeaDraft[]
  contributionRequests ContributionRequest[]
  activities          Activity[]
  reports             Report[]
  reportedBy          Report[] @relation("ReportedBy")
  notifications       Notification[]
  bookmarks           Bookmark[]
}

model Idea {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  content     String?  @db.Text
  category    IdeaCategory
  visibility  IdeaVisibility @default(PUBLIC)
  status      IdeaStatus @default(DRAFT)
  tags        String[]
  imageUrl    String?
  attachments IdeaAttachment[]
  viewCount   Int      @default(0)
  sparkCount  Int      @default(0)
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?
  authorId    String

  author              User                 @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments            Comment[]
  sparks              Spark[]
  ideaSkills          IdeaSkill[]
  ideaIndustries      IdeaIndustry[]
  contributionRequests ContributionRequest[]
  activities          Activity[]
  reports             Report[]
  bookmarks           Bookmark[]

  @@index([category])
  @@index([status])
  @@index([authorId])
  @@index([createdAt])
  @@index([sparkCount])
}

model Spark {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  ideaId    String?
  projectId String?
  commentId String?

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  idea    Idea?    @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, ideaId])
  @@unique([userId, projectId])
  @@unique([userId, commentId])
  @@index([userId])
  @@index([ideaId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  projectId String?
  ideaId    String?
  parentId  String?
  sparkCount Int     @default(0)
  isEdited  Boolean  @default(false)

  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  project  Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  idea     Idea?     @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("CommentReplies")
  sparks   Spark[]
  reports  Report[]

  @@index([authorId])
  @@index([ideaId])
  @@index([projectId])
  @@index([parentId])
  @@index([createdAt])
}

model ContributionRequest {
  id          String                    @id @default(cuid())
  message     String?                   @db.Text
  skills      String[]
  experience  String?                   @db.Text
  status      ContributionRequestStatus @default(PENDING)
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt
  respondedAt DateTime?
  userId      String
  ideaId      String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  idea Idea @relation(fields: [ideaId], references: [id], onDelete: Cascade)

  @@unique([userId, ideaId])
  @@index([status])
  @@index([createdAt])
}

model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  description String
  metadata    Json?
  createdAt   DateTime     @default(now())
  userId      String
  ideaId      String?
  projectId   String?

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  idea    Idea?    @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  read      Boolean          @default(false)
  metadata  Json?
  createdAt DateTime         @default(now())
  userId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
  @@index([createdAt])
}

model Report {
  id          String     @id @default(cuid())
  reason      ReportReason
  description String?    @db.Text
  status      ReportStatus @default(PENDING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  reporterId  String
  userId      String?
  ideaId      String?
  commentId   String?

  reporter User     @relation("ReportedBy", fields: [reporterId], references: [id], onDelete: Cascade)
  user     User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  idea     Idea?    @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  comment  Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([createdAt])
}

model Bookmark {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  ideaId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  idea Idea @relation(fields: [ideaId], references: [id], onDelete: Cascade)

  @@unique([userId, ideaId])
  @@index([userId])
}

model IdeaDraft {
  id          String   @id @default(cuid())
  title       String?
  description String?  @db.Text
  content     String?  @db.Text
  category    IdeaCategory?
  visibility  IdeaVisibility @default(PUBLIC)
  tags        String[]
  imageUrl    String?
  skills      String[]
  industries  String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
}

model IdeaAttachment {
  id       String           @id @default(cuid())
  filename String
  fileUrl  String
  fileType AttachmentType
  fileSize Int
  ideaId   String
  uploadedAt DateTime       @default(now())

  idea Idea @relation(fields: [ideaId], references: [id], onDelete: Cascade)
}

model IdeaSkill {
  id      String @id @default(cuid())
  ideaId  String
  skillId String

  idea  Idea  @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([ideaId, skillId])
}

model IdeaIndustry {
  id         String @id @default(cuid())
  ideaId     String
  industryId String

  idea     Idea     @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  industry Industry @relation(fields: [industryId], references: [id], onDelete: Cascade)

  @@unique([ideaId, industryId])
}

model Skill {
  id          String      @id @default(cuid())
  name        String      @unique
  category    String
  description String?
  createdAt   DateTime    @default(now())
  users       UserSkill[]
  ideas       IdeaSkill[]
}

model Industry {
  id          String         @id @default(cuid())
  name        String         @unique
  description String?
  createdAt   DateTime       @default(now())
  users       UserIndustry[]
  ideas       IdeaIndustry[]
}

model UserSkill {
  id           String    @id @default(cuid())
  userId       String
  skillId      String
  proficiency  SkillLevel @default(INTERMEDIATE)
  yearsOfExp   Int?
  createdAt    DateTime  @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([userId, skillId])
}

model UserIndustry {
  id         String   @id @default(cuid())
  userId     String
  industryId String
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  industry Industry @relation(fields: [industryId], references: [id], onDelete: Cascade)

  @@unique([userId, industryId])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String
  content     String?  @db.Text
  status      ProjectStatus @default(PLANNING)
  tags        String[]
  imageUrl    String?
  sparkCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String

  author         User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  collaborations Collaboration[]
  comments       Comment[]
  sparks         Spark[]
  activities     Activity[]
}

model Collaboration {
  id        String   @id @default(cuid())
  role      String
  status    CollaborationStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  projectId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

enum ProfileVisibility {
  PUBLIC
  PRIVATE
}

enum IdeaVisibility {
  PUBLIC
  PRIVATE
}

enum IdeaStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum IdeaCategory {
  TECHNOLOGY
  BUSINESS
  DESIGN
  HEALTHCARE
  EDUCATION
  ENTERTAINMENT
  ENVIRONMENT
  SOCIAL_IMPACT
  FINANCE
  LIFESTYLE
  OTHER
}

enum AttachmentType {
  IMAGE
  PDF
  DOCUMENT
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum CollaborationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ContributionRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum ActivityType {
  IDEA_CREATED
  IDEA_UPDATED
  IDEA_SPARKED
  IDEA_COMMENTED
  USER_FOLLOWED
  CONTRIBUTION_REQUESTED
  CONTRIBUTION_ACCEPTED
  CONTRIBUTION_WITHDRAWN
  PROJECT_CREATED
  PROJECT_UPDATED
}

enum NotificationType {
  SPARK
  COMMENT
  FOLLOW
  CONTRIBUTION_REQUEST
  CONTRIBUTION_ACCEPTED
  MENTION
  SYSTEM
}

enum ReportReason {
  SPAM
  INAPPROPRIATE_CONTENT
  HARASSMENT
  COPYRIGHT_VIOLATION
  MISINFORMATION
  OTHER
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}
